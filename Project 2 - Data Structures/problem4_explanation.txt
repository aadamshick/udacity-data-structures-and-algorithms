I leveraged a python list (i.e. dynamic array) along with a recursive algorithm
to search the user groups.  The algorithm runs in O(n) time complexity, where n is
the total number of users and groups in the starting group.  In the worst case, it
needs to perform an exhaustive search in order to determine that a user isn't
contained in any of the sub-groups.  The algorithm takes O(m) space complexity,
where m is the total number of return statements generated by the algorithm. This
roughly corresponds to the deepest number of embedded groups in the starting group.